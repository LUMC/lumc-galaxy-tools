<tool id="gatk4_combine_gvcfs" name="GATK4 CombineGVCFs" version="@WRAPPER_VERSION@+galaxy1" profile="18.05">
    <description>- Merges one or more HaplotypeCaller GVCF files into a single GVCF with appropriate annotations</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_cmd"/>
    <command detect_errors="exit_code">
        <![CDATA[
        #include source=$set_sections#
        #include source=$pre_gatk_excl_ints_chth#
        #include source=$pre_gatk_ints_chth#

        #set ref_flag='--reference="reference.fa"'

        #if str($reference_source.reference_source_selector) == 'history'
            ln -s '$reference_source.reference_sequence' reference.fa &&
            samtools faidx reference.fa &&
            gatk CreateSequenceDictionary --REFERENCE="reference.fa" --OUTPUT="reference.dict" &&
        #else if str($reference_source.reference_source_selector) == 'cached'
            ln -s '$reference_source.reference_sequence.fields.path' reference.fa &&
            samtools faidx reference.fa &&
            gatk CreateSequenceDictionary --REFERENCE="reference.fa" --OUTPUT="reference.dict" &&
        #else
            #set ref_flag=''
        #end if

        gatk CombineGVCFs --QUIET $ref_flag

        #if $optional.interval_merging_rule:
            --interval-merging-rule="$optional.interval_merging_rule"
        #end if

        #if $optional.interval_set_rule:
            --interval-set-rule="$optional.interval_set_rule"
        #end if

        #include source=$gatk_excl_ints_chth#
        #include source=$gatk_ints_chth#
        #include source=$vcf_output_opts#
        #include source=$gatk_seqdict#
        ]]>
    </command>
    <inputs>
        <repeat name="inputs" title="Input GVCF File" min="2">
            <param name="gvcf" type="data" format="vcf_bgzip"/>
        </repeat>
        <expand macro="ref_sel"/>
        <expand macro="gzip_vcf_params"/>
        <section name="optional" title="Interval options" expanded="false">

                <expand macro="gatk_excl_ints"/>
                <expand macro="gatk_ints"/>

                <param name="interval_merging_rule" argument="--interval-merging-rule" type="select" optional="true" label="Interval Merging Rule" help="Interval merging rule for abutting intervals">
                    <option selected="true" value="ALL">All</option>
                    <option value="OVERLAPPING_ONLY">Overlapping only</option>
                </param>
                <param name="interval_set_rule" argument="--interval-set-rule" type="select" optional="true" label="Interval Set Rule" help="Set merging approach to use for combining interval inputs">
                    <option selected="true" value="UNION">Union</option>
                    <option value="INTERSECTION">Intersection</option>
                </param>
        </section>
    </inputs>
    <outputs>
        <expand macro="gzip_vcf_output_params"/>
    </outputs>
    <help><![CDATA[CombineGVCFs is meant to be used for merging of GVCFs that
will eventually be input into GenotypeGVCFs. One could use this tool to
genotype multiple individual GVCFs instead of GenomicsDBImport; one would
first use CombineGVCFs to combine them into a single GVCF and pass the
results into GenotypeGVCFs. The main advantage of using CombineGVCFs over
GenomicsDBImport is the ability to combine multiple intervals at once without
building a GenomicsDB. CombineGVCFs is slower than GenomicsDBImport though,
so it is recommended CombineGVCFs only be used when there are few samples to
merge.

Usage example
~~~~~~~~~~~~~~
::

    gatk CombineGVCFs \
      -R reference.fasta \
      --variant sample1.g.vcf.gz \
      --variant sample2.g.vcf.gz \
      -O cohort.g.vcf.gz


Caveats
~~~~~~~
Only GVCF files produced by HaplotypeCaller (or CombineGVCFs) can be used as
input for this tool. Some other programs produce files that they call GVCFs but
those lack some important information (accurate genotype likelihoods for every
position) that GenotypeGVCFs requires for its operation.

If the GVCF files contain allele specific annotations, add
`-G Standard -G AS_Standard` to the command line.

Users generating large callsets (1000+ samples) may prefer GenomicsDBImport,
which uses Intel's GenomicsDB and is capable of scaling to much larger sample
sizes than CombineGVCFs. This tool provides a pure java reference
implementation of the combine operation which is available on all
architectures.
]]></help>
    <citations>
        <expand macro="citations"/>
    </citations>
</tool>
